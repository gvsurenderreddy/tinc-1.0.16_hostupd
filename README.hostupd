Hosts update protocol extension permits tinc to update hosts files and partially configuration
distributely and securely. It does not depend on external service such as ssh or https, so doing
any update work inside tinc protocol, by tinc daemon itself.

hostupd patch is Copyright (C) LynxLynx <lynx@lynxlynx.tk> - licensed under GNU GPL v2 _ONLY_
(no "or any later version" clause is permitted to apply). Work done by others merged in single
source file is copyrighted by program license stated in COPYING file or source file comments.

WARNING! This tinc will NOT be able to connect to unpatched versions even of same version -
due to changed protocol version number and certain request formats were added or changed.

This tinc distribution already includes a fix for CVE-2013-1428. You don't need to apply additional
security patches, although there maybe other security issues in future.
It also includes patches to support IPv6 short subnets format in hosts files and my own fixes.
They are in separate commits, which end with "(patch)".

The repository with full history is available here: https://github.com/siblynx/tinc-1.0.16_hostupd


Below is detailed description and user instructions to configure this subsystem for your network:

This subsystem introduces hosts and configuration automatic update facility
inside tinc protocol itself, so it can run:
1) Distributed (with signatures)
2) Asynchronously (at any time, even interferences are permitted)
3) Updater servers can be added or removed at any time by updaters
4) Not depends from external services: runs purely inside tinc network itself!

For it to work, network admins should define special nodes which will be
responsible for update service they will run. The update service is inside tinc,
and updates are spread across the whole network via broadcast requests.

Each update session will deliver the whole network hosts files to each node,
including master update nodes, so network consistency is maintained automatically.

Receiving node can decide to receive updates or to ignore them.
If receiving node has child connections not connected directly with master node, it
can decide to forward update requests to them or not.

Currently, this extension does not require all nodes to obey updates, but network consistency
is well maintained only when all nodes apply updates.

To protect network consistency, not any node can send updates.
Only authorized nodes can do so. The authorization is granted from already
existing updater nodes, via these distributed hosts files updates.
If no node was defined as updater node, without external configuration file
edits on each node it's not possible to define one.
Selfnamed as updater nodes will be ignored by the rest of the network.
Information about updater nodes such as options, flags, or privilege marks is not
sent across network within control requests, instead, status of node privilege
is determined directly by reading it's host definition directly at each request.

To prevent update request tampering, each request from authorized node is signed by
it's private key and signature is sent in each update request, be it control or data request.
When receiving, receive node tests it's privilege status from it's host definition and
tests signature of received request by verifying it with authorized node public key.

IMPLEMENTATION DETAILS

The protocol is extended by two new request types: HOSTUPDATE and CONFUPDATE.

HOSTUPDATE request format:

"HOSTUPDATE updname hosttoupd b64host slen dlen b64dgst"
HOSTUPDATE is request number (as all requests in tinc protocol) from request_t enum
updname is updater's authorized node name
hosttoupd is host name to be updated
b64host is base64 unencrypted host data to be overwritten
slen is length of decoded b64host
dlen is digital signature length (with sha256 it always 256)
b64dgst is base64 encoded request signature of "updname hosttoupd b64host slen",
      to ensure consistency and prevent tampering

HOSTUPDATE control requests

Hosts update process starts with "START" HOSTUPDATE request:
"HOSTUPDATE updname updname START 0 dlen"
START is marker of started "session", but this process is now defined sessionless,
     because each receiver needs to run pre-update script, like embedded devices make
     their read-only filesystems read-write.
hosttoupd is set as updname, and receiver should check that
Length of host data is set to zero

Hosts update process ends with "END" HOSTUPDATE request:
"HOSTUPDATE updname updname END 0 dlen"
It's like "START" request, but reverse. Usually when receiver gets this request, it runs
post-update script then schedules complete reload of tinc daemon to make changes effective.
All checks necessary for "START" request apply here.

Inactive/dead/banned hosts are removed by HOSTUPDATE "DEAD" request:
"HOSTUPDATE updname hosttoupd DEAD 0 dlen"
On this request, receiver should remove hosttoupd file from it's hosts directory.
No necessary checks are defined for this host update.

The similar request type is CONFUPDATE request. It is designed to update main configuration
file of the node, tinc.conf.
Few words about update process of file itself:
Since that each node configuration is rather individual, certain configuration variables
in which change we're not interested are preserved, and template "update" is appended then.

CONFUPDATE request format:

"CONFUPDATE updname b64conf slen dlen b64dgst"
CONFUPDATE is request number like in HOSTUPDATE
updname is updater's authorized node name
b64conf is base64 unencrypted configuration data to append
slen is length of base64 decoded configuration data
dlen is digital signature length (with sha256 it always 256)
b64dgst is base64 encoded signature of "updname b64conf slen dlen"

CONFUPDATE request has the same START and END markers which are useful for scripts.

END USER CONFIGURATION

To define master nodes, each node must have one of these variables inside master node host file:

"HostsFilesMaster" = yes | no - permits master node to send updates for
      whole hosts files database
"ConfFileMaster" = yes | no - also to hosts files,
     master node can send updates for configuration file

Master node configuration (tinc.conf):

"HostsUpdateInterval" = seconds (0) - time between sending updates.
     Both hosts and conf updates are sent (if permissions are given)
"ConfFileTemplate" = filename - which file is template to send over as tinc.conf update
     (must be in directory with tinc.conf itself)

Ignoring/forwarding updates policy (tinc.conf):

"IgnoreHostsUpdates" = yes | no (no) - completely reject hosts updates.
"DontForwardHostsUpdates" = yes | no (no) - do not forward hosts updates
     to child nodes, but accept them.
"IgnoreConfUpdates" = yes | no (no) - completely reject configuration file updates.
"DontForwardConfUpdates" = yes | no (no) - do not forward configuration file updates
      to child nodes, but accept them.
"IgnoreNetUpdates" = yes | no (no) - rejects all types of updates.
When ignoring updates, no answers about that is sent by ignoring nodes.

Dead host marking and removing:

"DeadHost" = yes | no - set in host file of host to be removed
     (the host file can be kept in hosts directory on master node, it will not be removed)

Bootstraping newcoming node:

NeedsNetUpdates = yes | no - set in host file of host to be updated when it will join the network
     for a first time (often with incomplete hosts database).
     Sending node must have permission to update newcomer, so newcomer must connect to
     one of update nodes directly. If node connects indirectly, it will receive full update
     when one of network master nodes will sent it periodically.
     You should not connect newcomer to more than one master nodes, otherwise an interference
     in requests will occur and this state was not tested at all.

Authentication tests (tinc.conf):

"DontVerifyUpdateSignature" = yes | no (no) - bypass signature test
"DontVerifyUpdatePermission" = yes | no (no) - bypass permission test

These are useful when you need to bootstrap full hosts database, when you don't have
     master node(s) hosts file with public key.
Note however network admins can set a config template to unset these vars when you're
     successfully bootstrapped your node, but anyone can send you random data in this mode
     (possibly with claims of their own authority) and you will happily accept that.
     Instead of this mode, you should already have received trustful bootstrap nodes
     information upon joining the network via other channels (email, ssh, https etc.)
To turn off all rights tests, you need to set both variables to yes.

RUNNING PRE AND POST UPDATE SCRIPT

When hosts files database is updated, the following scripts are executed as subprocess:

hostsupdate-before, hostsupdate-after

They are useful to prepare environment for writing updated files.
As an example, embedded systems with readonly remountable filesystems.

When config file is updated, the following scripts are executed as subprocess:

confupdate-before, confupdate-after

Their purpose is same as host file scripts.

"-before" script executed before update process is started, "-after" script executed after
     update process is ended.

For all of those scripts the following environment variables are available:

NETNAME, DEVICE, INTERFACE, NAME


- Lynx, Oct2015
